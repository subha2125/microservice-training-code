Step1
cf login -a api.run.pivotal.io

step2

cf push routename -p <jar>
cf push globalins-cf -p <jar>

*** CF Push ***
cf push insuranceapp2019-cf -p insuranceapp-1.0.0.jar

cf push insuranceappopenshift2019-cf -p insuranceappopenshift-1.0.0.jar 

step3
connect app to db service

step 4
restage



-------------------------------------------------------------
step 0:
docker run -d -p 9411:9411 openzipkin/zipkin


step 1 :

docker run --name insuranceapp-mysql -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=insuranceappDB -e MYSQL_USER=insuranceapp_user -e MYSQL_PASSWORD=insuranceapp_pass -p 4406:4406 -d mysql


** Openshift ***
------------------

oc login --token=Tv5PpZKcCstYenFyjvjXIAgYesqvdN0iK8pPGmVdvN0 --server=https://api.us-east-1.starter.openshift-online.com:6443

oc new-app -e MYSQL_USER=insuranceapp_user, MYSQL_PASSWORD=insuranceapp_pass,MYSQL_DATABASE=insuranceappDB,MYSQL_ROOT_PASSWORD=admin  registry.access.redhat.com/openshift3/mysql-55-rhel7
oc new-app -e MYSQL_USER=ins_user, MYSQL_PASSWORD=ins_pass,MYSQL_DATABASE=insuranceappDB,MYSQL_ROOT_PASSWORD=admin  registry.access.redhat.com/rhscl/mysql-80-rhel7
oc new-app -e MYSQL_USER=ins_user, MYSQL_PASSWORD=ins_pass,MYSQL_DATABASE=insuranceappDB,MYSQL_ROOT_PASSWORD=admin  --docker-image="mysql:latest"

oc new-app eshghos/ms-openshift2019:latest --name=ms-ins-app

Openshift MySql ip : 172.30.241.85:3306

mysql -u ins_user -p

docker run -it -d -p 4406:4406 mysql

docker container ls -a

docker run --name rps-mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=rpsdb -e MYSQL_USER=rps_user -e MYSQL_PASSWORD=rps_pass -d mysql

docker run --name boa-mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=boamumbaidb -e MYSQL_USER=boa_user -e MYSQL_PASSWORD=boa_pass -d mysql

check the log
docker logs demo-mysql

remove the container

docker rm containerid

stop the container
docker stop containerid

restart the container
docker restart containerid





testing......
docker exec -it insuranceapp-mysql mysql -u root -p
docker exec -it boa-mysql mysql -u root -p
create database use root credentials when container running

step 2

create docker file
FROM java:8
LABEL maintainer=“chathuranga.t@gmail.com”
VOLUME /tmp
EXPOSE 8080
ADD target/spring-boot-data-jpa-example-0.0.1-SNAPSHOT.jar spring-boot-data-jpa-example-0.0.1-SNAPSHOT.jar
ENTRYPOINT ["java","-jar","spring-boot-data-jpa-example-0.0.1-SNAPSHOT.jar"]

step 3

//must after changing db url
mvn clean install -DskipTests 


step 4

docker build -f Dockerfile -t spring-jpa-app .

or
------------------------------
sample docker file
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG JAR_FILE
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]
-----------------------------------------
docker build --build-args=build/libs/*.jar -t myorg/myapp .

or
docker build -t globalins .

step 6

docker images

step 7
docker ps


step 8
                                                 container name
docker run -h 192.168.99.100 -p 6060:6060 --name demo-app 
--link demo-mysql:mysql -d globalins

docker run -h 192.168.99.100 -p 6070:6060 --name insuranceapp-app --link insuranceapp-mysql:mysql -d spring-jpa-app
docker run -h 192.168.99.100 -p 6070:6060 --name insuranceapp-app --network insuranceapp_default --link insuranceapp-mysql:mysql -d spring-jpa-app

        mysql container name:mysql image name     app image name     
docker run -h 192.168.99.100 -p 7070:6060 --name test-app 
--link demo-mysql:mysql -d spring-jpa-app

docker run -h 192.168.99.100 -p 7070:7070 --name kycprocess-app 
--link boa-mysql:mysql -d kycprocess


docker run -h 192.168.99.100 -p 7090:6060 --name container-app 
--link demo-mysql:mysql -d kycmumbai-app


docker run -h 192.168.99.100 -p 6070:6070 --name ldap-container-app 
--link demo-mysql:mysql -d ldap2019-app





docker run -h 192.168.99.100 -p 8761:8761 --name eurekacontainer-app -d eureka-app:latest

docker run -h 192.168.99.100 -p 8761:8761 --name eurekacontainer2019-app -d eureka2019-app:latest



-----------------------------------------------------

docker hub
https://hub.docker.com/
username:dockerid - not mail id -- eswaribala
password:*****
------------------------------------------------
           image name            docker id  repo    tagname     
docker tag dockersampling:latest eswaribala/rpsdockertraining:v1

docker tag bankingdockerapp:latest eswaribala/rpscgimsrepo:v1

docker tag globalins eswaribala/globalinsorepo:v1

docker tag ins-jpa-app eswaribala/esinsapprepo:v1

docker push eswaribala/rpsfdrepo:v1 

docker push eswaribala/rpscgimsrepo:v1

docker push eswaribala/globalinsorepo:v1
--------------------------------------------------------------



Open a terminal window.

Sign into your Azure account with the Azure CLI by typing az login

Create an Azure service principal by typing az ad sp create-for-rbac --name "uuuuuuuu" --password "pppppppp" (uuuuuuuu is the user name and pppppppp is the password for the service principal).

Azure should print out a JSON response resembling this:


{
   "appId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
   "displayName": "uuuuuuuu",
   "name": "http://uuuuuuuu",
   "password": "pppppppp",
   "tenant": "tttttttt-tttt-tttt-tttt-tttttttttttt"
}

Configure Maven to use your Azure service principal
In this section, you will configure Maven to authenticate using your Azure service principal for web app deployment.

Open your Maven settings.xml file in a text editor (usually found at either /etc/maven/settings.xml or $HOME/.m2/settings.xml).

Add your Azure service principal settings from the previous section of this tutorial to the <servers> collection in the settings.xml file as shown below:

<servers>
   <server>
     <id>azure-auth</id>
      <configuration>
         <client>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</client>
         <tenant>tttttttt-tttt-tttt-tttt-tttttttttttt</tenant>
         <key>pppppppp</key>
         <environment>AZURE</environment>
      </configuration>
   </server>
</servers>
Save and close the settings.xml file.

./mvnw azure-webapp:deploy
------------------------------------------------------